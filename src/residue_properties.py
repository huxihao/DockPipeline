'''
Transform a residue into a numeric vector by replacing it with physical proterties. Data downloaded from:

http://web.expasy.org/protscale/
1. Hphob. / Kyte & Doolittle
2. Polarity / Grantham
3. Average area buried
4. % accessible residues
5. Transmembrane tendency
6. Bulkiness
7. Amino acid composition
'''

HPHO = {
'Ala':  1.800, 'Arg': -4.500, 'Asn': -3.500, 'Asp': -3.500, 'Cys':  2.500, 'Gln': -3.500, 'Glu': -3.500, 'Gly': -0.400, 'His': -3.200, 'Ile':  4.500, 'Leu':  3.800, 'Lys': -3.900, 'Met':  1.900, 'Phe':  2.800, 'Pro': -1.600, 'Ser': -0.800, 'Thr': -0.700, 'Trp': -0.900, 'Tyr': -1.300, 'Val':  4.200,
} 
POLA = {
'Ala':  8.100, 'Arg': 10.500, 'Asn': 11.600, 'Asp': 13.000, 'Cys':  5.500, 'Gln': 10.500, 'Glu': 12.300, 'Gly':  9.000, 'His': 10.400, 'Ile':  5.200, 'Leu':  4.900, 'Lys': 11.300, 'Met':  5.700, 'Phe':  5.200, 'Pro':  8.000, 'Ser':  9.200, 'Thr':  8.600, 'Trp':  5.400, 'Tyr':  6.200, 'Val':  5.900,
}
AREA = {
'Ala': 86.600, 'Arg': 162.200, 'Asn': 103.300, 'Asp': 97.800, 'Cys': 132.300, 'Gln': 119.200, 'Glu': 113.900, 'Gly': 62.900, 'His': 155.800, 'Ile': 158.000, 'Leu': 164.100, 'Lys': 115.500, 'Met': 172.900, 'Phe': 194.100, 'Pro': 92.900, 'Ser': 85.600, 'Thr': 106.500, 'Trp': 224.600, 'Tyr': 177.700, 'Val': 141.000,
}
ACCE = {
'Ala':  6.600, 'Arg':  4.500, 'Asn':  6.700, 'Asp':  7.700, 'Cys':  0.900, 'Gln':  5.200, 'Glu':  5.700, 'Gly':  6.700, 'His':  2.500, 'Ile':  2.800, 'Leu':  4.800, 'Lys': 10.300, 'Met':  1.000, 'Phe':  2.400, 'Pro':  4.800, 'Ser':  9.400, 'Thr':  7.000, 'Trp':  1.400, 'Tyr':  5.100, 'Val':  4.500, 
}
TRAN = {
'Ala':  0.380, 'Arg': -2.570, 'Asn': -1.620, 'Asp': -3.270, 'Cys': -0.300, 'Gln': -1.840, 'Glu': -2.900, 'Gly': -0.190, 'His': -1.440, 'Ile':  1.970, 'Leu':  1.820, 'Lys': -3.460, 'Met':  1.400, 'Phe':  1.980, 'Pro': -1.440, 'Ser': -0.530, 'Thr': -0.320, 'Trp':  1.530, 'Tyr':  0.490, 'Val':  1.460,
}
BULK = {
'Ala': 11.500, 'Arg': 14.280, 'Asn': 12.820, 'Asp': 11.680, 'Cys': 13.460, 'Gln': 14.450, 'Glu': 13.570, 'Gly': 3.400, 'His': 13.690, 'Ile': 21.400, 'Leu': 21.400, 'Lys': 15.710, 'Met': 16.250, 'Phe': 19.800, 'Pro': 17.430, 'Ser': 9.470, 'Thr': 15.770, 'Trp': 21.670, 'Tyr': 18.030, 'Val': 21.570
}
COMP = {
'Ala':8.25, 'Arg':5.53, 'Asn':4.06, 'Asp':5.45, 'Cys':1.37, 'Gln':3.93, 'Glu':6.75, 'Gly':7.07, 'His':2.27, 'Ile':5.96, 'Leu':9.66, 'Lys':5.84, 'Met':2.42, 'Phe':3.86, 'Pro':4.70, 'Ser':6.56, 'Thr':5.34, 'Trp':1.08, 'Tyr':2.92, 'Val':6.87
}

VECTOR = [HPHO, POLA, AREA, ACCE, TRAN, BULK, COMP]

def scale_values():
    for dic in VECTOR:
        key, item = zip(*dic.items())
        maximum = max(item)
        minimum = min(item)
        for res in dic:
            value = dic[res]
            dic[res] = (value-minimum)/(maximum-minimum)

scale_values() ## scale by default

def get_vector(residue):
    r = residue.title()
    v = []
    for dic in VECTOR:
        if r not in dic:
            v.append(0.0)
        else:
            v.append(dic[r])
    return v

three_to_one = [('Ala','A'), ('Arg','R'), ('Asn','N'), ('Asp','D'), ('Cys','C'), ('Glu','E'), ('Gln','Q'), ('Gly','G'), ('His','H'), ('Ile','I'), ('Leu','L'), ('Lys','K'), ('Met','M'), ('Phe','F'), ('Pro','P'), ('Ser','S'), ('Thr','T'), ('Trp','W'), ('Tyr','Y'), ('Val','V')]

## ftp://ftp.ncbi.nih.gov/blast/matrices/BLOSUM62
blosum62 = [
('A',4,-1,-2,-2,0,-1,-1,0,-2,-1,-1,-1,-1,-2,-1,1,0,-3,-2,0,-2,-1,0,-4),
('R',-1,5,0,-2,-3,1,0,-2,0,-3,-2,2,-1,-3,-2,-1,-1,-3,-2,-3,-1,0,-1,-4),
('N',-2,0,6,1,-3,0,0,0,1,-3,-3,0,-2,-3,-2,1,0,-4,-2,-3,3,0,-1,-4),
('D',-2,-2,1,6,-3,0,2,-1,-1,-3,-4,-1,-3,-3,-1,0,-1,-4,-3,-3,4,1,-1,-4),
('C',0,-3,-3,-3,9,-3,-4,-3,-3,-1,-1,-3,-1,-2,-3,-1,-1,-2,-2,-1,-3,-3,-2,-4),
('Q',-1,1,0,0,-3,5,2,-2,0,-3,-2,1,0,-3,-1,0,-1,-2,-1,-2,0,3,-1,-4),
('E',-1,0,0,2,-4,2,5,-2,0,-3,-3,1,-2,-3,-1,0,-1,-3,-2,-2,1,4,-1,-4),
('G',0,-2,0,-1,-3,-2,-2,6,-2,-4,-4,-2,-3,-3,-2,0,-2,-2,-3,-3,-1,-2,-1,-4),
('H',-2,0,1,-1,-3,0,0,-2,8,-3,-3,-1,-2,-1,-2,-1,-2,-2,2,-3,0,0,-1,-4),
('I',-1,-3,-3,-3,-1,-3,-3,-4,-3,4,2,-3,1,0,-3,-2,-1,-3,-1,3,-3,-3,-1,-4),
('L',-1,-2,-3,-4,-1,-2,-3,-4,-3,2,4,-2,2,0,-3,-2,-1,-2,-1,1,-4,-3,-1,-4),
('K',-1,2,0,-1,-3,1,1,-2,-1,-3,-2,5,-1,-3,-1,0,-1,-3,-2,-2,0,1,-1,-4),
('M',-1,-1,-2,-3,-1,0,-2,-3,-2,1,2,-1,5,0,-2,-1,-1,-1,-1,1,-3,-1,-1,-4),
('F',-2,-3,-3,-3,-2,-3,-3,-3,-1,0,0,-3,0,6,-4,-2,-2,1,3,-1,-3,-3,-1,-4),
('P',-1,-2,-2,-1,-3,-1,-1,-2,-2,-3,-3,-1,-2,-4,7,-1,-1,-4,-3,-2,-2,-1,-2,-4),
('S',1,-1,1,0,-1,0,0,0,-1,-2,-2,0,-1,-2,-1,4,1,-3,-2,-2,0,0,0,-4),
('T',0,-1,0,-1,-1,-1,-1,-2,-2,-1,-1,-1,-1,-2,-1,1,5,-2,-2,0,-1,-1,0,-4),
('W',-3,-3,-4,-4,-2,-2,-3,-2,-2,-3,-2,-3,-1,1,-4,-3,-2,11,2,-3,-4,-3,-2,-4),
('Y',-2,-2,-2,-3,-2,-1,-2,-3,2,-1,-1,-2,-1,3,-3,-2,-2,2,7,-1,-3,-2,-1,-4),
('V',0,-3,-3,-3,-1,-2,-2,-3,-3,3,1,-2,1,-1,-2,-2,0,-3,-1,4,-3,-2,-1,-4),
('B',-2,-1,3,4,-3,0,1,-1,0,-3,-4,0,-3,-3,-2,0,-1,-4,-3,-3,4,1,-1,-4),
('Z',-1,0,0,1,-3,3,4,-2,0,-3,-3,1,-1,-3,-1,0,-1,-3,-2,-2,1,4,-1,-4),
('X',0,-1,-1,-1,-2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-2,0,0,-2,-1,-1,-1,-1,-1,-4),
('*',-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,1)]

def get_vector_test(residue):
    r3 = residue.title()
    r1 = ''
    for aa3, aa1 in three_to_one:
        if aa3 == r3:
            r1 = aa1
            break
    for vec in blosum62:
        if vec[0] == r1:
            return [i/10.0 for i in vec[1:-1]]

#print get_vector('ALA')
